// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "12/10/2020 00:20:22"
                                                                                
// Verilog Test Bench template for design : main
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module main_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg [7:0] btn;
reg clk;
reg [7:0] key;
// wires                                               
wire beep;
wire [7:0]  ds;
wire [7:0]  line_g;
wire [7:0]  line_r;
wire [7:0]  row;
wire [7:0]  seg;

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.beep(beep),
	.btn(btn),
	.clk(clk),
	.ds(ds),
	.key(key),
	.line_g(line_g),
	.line_r(line_r),
	.row(row),
	.seg(seg)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
	btn=8'b00000001;
	clk=1;
	#100;
	btn=8'b00001000;
	key=8'b00000000;
	#2000000;
	btn=8'b10000000;
	key=8'b00000011;
	#2000000;
	btn=8'b00000000;
	key=8'b00100100;
	#5000000;
	key=8'b00001000;
	#100;
	btn=8'b00010000;
	#2000000;
	btn=8'b00000000;
	#2000000;
	btn=8'b01000000;
	#2000000;
	btn=8'b00000000;
	#2000000;
	key=8'b00000000;
	#100;
	key=8'b01000100;
	#5000000;
	$stop;
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
#1 clk=~clk;                                              
// --> end                                             
end                                                    
endmodule

